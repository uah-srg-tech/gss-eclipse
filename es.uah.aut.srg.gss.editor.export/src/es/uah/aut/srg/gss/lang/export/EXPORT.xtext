// automatically generated by Xtext
grammar es.uah.aut.srg.gss.lang.export.EXPORT with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/export" 
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSExportExport
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' ':=' importURI=STRING ';'
;

GSSExportExport returns GSSExportExport:
	'GSSExportExport'
	name = ID
	 '{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';'))
		'from' ':=' from=ID ';'
		'to' ':=' to=ID ';'
		(Sizes=GSSExportSizes)? 
		settings=GSSExportSettings
		(activateDICs=GSSExportActivateDICs)?
	'}' ';'
;

GSSExportSizes returns GSSExportSizes:
	{GSSExportSizes}
	'GSSExportSizes' '{'
		((sizeFromFileLength+=GSSExportSizeFromFileLength) |
			(sizeFromFileLine+=GSSExportSizeFromFileLine) |
			(sizeInBits+=GSSExportSizeInBits))+
	'}' ';'
;

enum GSSExportUnit returns GSSExportUnit:
	bits = 'bits' | bytes = 'bytes'
;

GSSExportSizeFromFileLength returns GSSExportSizeFromFileLength:
	'GSSExportSizeFromFileLength' '{'
		'id' ':=' id=INTEGER ';'
		'fromFile' ':=' fromFile=ID ';'
		('addSize' ':=' addSize=INTEGER ';')?
		('unit' ':=' unit=GSSExportUnit ';')?
	'}' ';'
;

GSSExportSizeFromFileLine returns GSSExportSizeFromFileLine:
	'GSSExportSizeFromFileLine' '{'
		'id' ':=' id=INTEGER ';'
		'fromFile' ':=' fromFile=ID ';'
		'line' ':=' line=INTEGER ';'
		('addSize' ':=' addSize=INTEGER ';')?
		('unit' ':=' unit=GSSExportUnit ';')?
	'}' ';'
;

GSSExportSizeInBits returns GSSExportSizeInBits:
	'GSSExportSizeInBits' '{'
		'id' ':=' id=INTEGER ';'
		'from' ':=' from=ID ';'
		('addSize' ':=' addSize=INTEGER ';')?
		('unit' ':=' unit=GSSExportUnit ';')?
	'}' ';'
;

GSSExportSettings returns GSSExportSettings:
	{GSSExportSettings}
	'GSSExportSettings' '{'
		((settingFromConst+=GSSExportSettingFromConst) |
		(settingFromSize+=GSSExportSettingFromSize) |
		(settingFromFile+=GSSExportSettingFromFile) |
		(settingFromField+=GSSExportSettingFromField) |
		(settingAIFromConst+=GSSExportSettingAIFromConst) |
		(settingAIFromFile+=GSSExportSettingAIFromFile))*
	'}' ';'
;

GSSExportSettingFromConst returns GSSExportSettingFromConst:
	'GSSExportSettingFromConst' '{'
		'value' ':=' value=INTEGER ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
	'}' ';'
;
GSSExportSettingFromSize returns GSSExportSettingFromSize:
	'GSSExportSettingFromSize' '{'
		'sizeRef' ':=' sizeRef=INTEGER ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
	'}' ';'
;

GSSExportSettingFromFile returns GSSExportSettingFromFile:
	'GSSExportSettingFromFile' '{'
		'file' ':=' file=ID ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
		('offset' ':=' offset=INTEGER ';')?
		('size' ':=' size=INTEGER ';')?
		('line' ':=' line=INTEGER ';')?
	'}' ';'
;

GSSExportSettingFromField returns GSSExportSettingFromField:
	'GSSExportSettingFromField' '{'
		'fieldRef' ':=' fieldRef=ID ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
	'}' ';'
;

GSSExportSettingAIFromConst returns GSSExportSettingAIFromConst:
	'GSSExportSettingAIFromConst' '{'
		'value' ':=' value=INTEGER ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
	'}' ';'
;

GSSExportSettingAIFromFile returns GSSExportSettingAIFromFile:
	'GSSExportSettingAIFromFile' '{'
		'file' ':=' file=ID ';'
		'toFieldRef' ':=' toFieldRef=ID ';'
		'toArrayIndex' ':=' toArrayIndex=INTEGER ';'
		('offset' ':=' offset=INTEGER ';')?
		('size' ':=' size=INTEGER ';')?
		('line' ':=' line=INTEGER ';')?
	'}' ';'
;

GSSExportActivateDICs returns GSSExportActivateDICs:
	{GSSExportActivateDICs}
	'GSSExportActivateDICs' '{'
		(DIC+=GSSExportDIC)+
	'}' ';'
;

GSSExportDIC returns GSSExportDIC:
	'GSSExportDIC' '{'
		'id' ':=' id=INTEGER ';'
		'DICRef' ':=' DICRef=ID ';'
	'}' ';'
;

EString returns ecore::EString:
	STRING | ID;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false';