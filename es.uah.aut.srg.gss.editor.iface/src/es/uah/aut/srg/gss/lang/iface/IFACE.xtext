// automatically generated by Xtext
grammar es.uah.aut.srg.gss.lang.iface.IFACE with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/iface"
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSIfacePortConfig
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' importURI=STRING ';'
;

GSSIfacePortConfig returns GSSIfacePortConfig:
	'portConfig'
	name=ID
	'{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';'))
		portConfig=GSSIfacePort
	'}' ';';

GSSIfacePort returns GSSIfacePort:
	GSSIfaceSpWPort | GSSIfaceUartPort |
	GSSIfaceSocketSrvPort | GSSIfaceSocketCliPort |
	GSSIfaceSpWTCPort | GSSIfaceDummyPort
;

GSSIfaceSpWPort returns GSSIfaceSpWPort:
	'spwPort' '{'
		'type' ':=' type=GSSIfaceSpWPortType ';'
		'link' ':=' link=INTEGER ';'
		'writingPort' ':=' writingPort=INTEGER ';'
		(readingPort+=GSSIfaceReadingPort)+
	'}' ';'
;

GSSIfaceReadingPort returns GSSIfaceReadingPort:
	'readingPort' '{'
		'port' ':=' port=INTEGER ';'
	'}' ';'
;

enum GSSIfaceSpWPortType returns GSSIfaceSpWPortType:
	usb = 'usb' | mk2 = 'mk2' | 
	pci = 'pci'
;

GSSIfaceUartPort returns GSSIfaceUartPort:
	'uartPort' '{'
		'number' ':=' number=INTEGER ';'
		'baudRate' ':=' baudRate=GSSIfaceUartPortBaudRate ';'
		'parity' ':=' parity=GSSIfaceUartPortParity ';'
		'dataBits' ':=' dataBits=GSSIfaceUartPortDataBits ';'
		'stopBits' ':=' stopBits=GSSIfaceUartPortStopBits ';'
		'flowControl' ':=' flowControl=GSSIfaceUartPortFlowControl ';'
		portProtocol=GSSIfacePortProtocol
	'}' ';'
;

enum GSSIfaceUartPortBaudRate returns GSSIfaceUartPortBaudRate:
	_38400 = '38400bauds' | _115200 = '115200bauds'
;

enum GSSIfaceUartPortParity returns GSSIfaceUartPortParity:
	NO = 'NO' | ODD = 'ODD' | EVEN = 'EVEN' |
	MARK = 'MARK' | SPACE = 'SPACE'
;

enum GSSIfaceUartPortDataBits returns GSSIfaceUartPortDataBits:
	_5 = '5bits' | _6 = '6bits' |
	_7 = '7bits' | _8 = '8bits'
;

enum GSSIfaceUartPortStopBits returns GSSIfaceUartPortStopBits:
	_1 = '1bit' | _2 = '2bits'
;

GSSIfaceSocketSrvPort returns GSSIfaceSocketSrvPort:
	'socketSrvPort' '{'
		'portNumber' ':=' portNumber=INTEGER ';'
		portProtocol=GSSIfacePortProtocol
	'}' ';'
;

GSSIfaceSocketCliPort returns GSSIfaceSocketCliPort:
	'socketCliPort' '{'
		'ipAddress' ':=' ipAddress=STRING ';'
		'portNumber' ':=' portNumber=INTEGER ';'
		portProtocol=GSSIfacePortProtocol
	'}' ';'
;

enum GSSIfaceUartPortFlowControl returns GSSIfaceUartPortFlowControl:
	rts_cts = 'rts_cts' | xon_xoff = 'xon_xoff'
;

GSSIfacePortProtocol returns GSSIfacePortProtocol:
	'portProtocol' '{'
		'unit' ':=' unit=GSSIfacePortProtocolUnit ';'
		'power' ':=' power=GSSIfacePortProtocolPower ';'
		constSize=GSSIfaceConstSize
		sizeFieldOffset=GSSIfaceSizeFieldOffset
		sizeFieldTrim=GSSIfaceSizeFieldTrim
		(syncPattern=GSSIfaceSyncPattern)?
	'}' ';'
;

GSSIfaceConstSize returns GSSIfaceSize:
	'constSize' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSIfaceSizeFieldOffset returns GSSIfaceSize:
	'sizeFieldOffset' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSIfaceSizeFieldTrim returns GSSIfaceSize:
	'sizeFieldTrim' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSIfaceSyncPattern returns GSSIfaceSyncPattern:
	'syncPattern' '{'
		'hexValue' ':=' hexValue=HEXADECIMAL ';'
	'}' ';'
;

enum GSSIfacePortProtocolUnit returns GSSIfacePortProtocolUnit:
	bytes = 'bytes' | bits = 'bits'
;

enum GSSIfacePortProtocolPower returns GSSIfacePortProtocolPower:
	no = 'no' | _2 = '2bits' | _2_with_0 = '2_with_0'
;

GSSIfaceSpWTCPort returns GSSIfaceSpWTCPort:
	'spwTCPort' '{'
		'spwPortRef' ':=' spwPortRef=INTEGER ';'
	'}' ';'
;

GSSIfaceDummyPort returns GSSIfaceDummyPort:
	{GSSIfaceDummyPort}
	'dummyPort' '{'
	'}' ';'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false';
