// automatically generated by Xtext
grammar es.uah.aut.srg.gss.lang.test_proc.TEST_PROC with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/test_proc" 
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://srg.aut.uah.es/gss/tm_tc_format" as tm_tc_format
import "http://srg.aut.uah.es/gss/export" as export
import "http://srg.aut.uah.es/gss/filters" as filters
import "http://srg.aut.uah.es/gss/imports" as imports

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSTestProcTestProc
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' importURI=STRING ';'
;

GSSTestProcTestProc returns GSSTestProcTestProc:
	'GSSTestProcTestProc'
	name=ID
	'{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';'))
		(step+=GSSTestProcStep)+ 
	'}' ';'
;

GSSTestProcStep returns GSSTestProcStep:
	'GSSTestProcStep' '{'
		'name' ':=' name=ID ';'
		'id' ':=' id=INTEGER ';'
		('prev_step_idref' ':=' prev_step_idref=[GSSTestProcStep|VersionedQualifiedReferenceName] ';')?
		('output_idref_from_prev_step' ':=' output_idref_from_prev_step=[GSSTestProcOutput|VersionedQualifiedReferenceName] ';')?
		'mode' ':=' mode=GSSTestProcMode ';'
		('replays' ':=' replays=INTEGER ';')?
		inputs=GSSTestProcInputs
		(outputs=GSSTestProcOutputs)?
		(specialPackets=GSSTestProcSpecialPackets)?
		(concurrent_steps=GSSTestProcConcurrentSteps)?
	'}' ';'
;

enum GSSTestProcMode returns GSSTestProcMode:
	continuous = 'continuous' | manual = 'manual' |
	concurrent = 'concurrent'
;

GSSTestProcInputs returns GSSTestProcInputs:
	{GSSTestProcInputs}
	'GSSTestProcInputs' '{'
		((input_level_3+=GSSTestProcInputLevel3) |
		 (input_level_2+=GSSTestProcInputLevel2) |
		 (input_level_1+=GSSTestProcInputLevel1) |
		 (input_level_0+=GSSTestProcInputLevel0))+
	'}' ';'
;

GSSTestProcOutputs returns GSSTestProcOutputs:
	'GSSTestProcOutputs' '{'
		'checkmode' ':=' checkmode=GSSTestProcCheckmode ';'
		'valid_time_interval_value' ':=' valid_time_interval_value=INTEGER ';'
		'valid_time_interval_unit' ':=' valid_time_interval_unit=GSSTestProcUnit ';'
		((output_level_3+=GSSTestProcOutputLevel3) |
		 (output_level_2+=GSSTestProcOutputLevel2) |
		 (output_level_1+=GSSTestProcOutputLevel1) |
		 (output_level_0+=GSSTestProcOutputLevel0))+
	'}' ';'
;

GSSTestProcSpecialPackets returns GSSTestProcSpecialPackets:
	{GSSTestProcSpecialPackets}
	'GSSTestProcSpecialPackets' '{'
		((enable+=GSSTestProcEnable) |
		 (disable+=GSSTestProcDisable) |
		 (enable_print+=GSSTestProcEnablePrint) |
		 (disable_print+=GSSTestProcDisablePrint))+
	'}' ';'
;

GSSTestProcConcurrentSteps returns GSSTestProcConcurrentSteps:
	'GSSTestProcConcurrentSteps' '{'
		'nextStep' ':=' nextStep=GSSTestProcNextStep ';'
		(concurrent_step+=GSSTestProcConcurrentStep)+ 
	'}' ';'
;

GSSTestProcInputLevel3 returns GSSTestProcInputLevel3:
	'GSSTestProcInputLevel3' '{'
		'name' ':=' name=ID ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		'delay_value' ':=' delay_value=INTEGER ';'
		'delay_unit' ':=' delay_unit=GSSTestProcUnit ';'
		('level3' ':=' level3=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')? 
		'app_to_level3' ':=' app_to_level3=[export::GSSExportExport|VersionedQualifiedName] ';'
		('level2' ':=' level2=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level3_to_level2' ':=' level3_to_level2=[export::GSSExportExport|VersionedQualifiedName] ';')?
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level2_to_level1' ':=' level2_to_level1=[export::GSSExportExport|VersionedQualifiedName] ';')?
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_to_level0' ':=' level1_to_level0=[export::GSSExportExport|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcInputLevel2 returns GSSTestProcInputLevel2:
	'GSSTestProcInputLevel2' '{'
		'name' ':=' name=ID ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		'delay_value' ':=' delay_value=INTEGER ';'
		'delay_unit' ':=' delay_unit=GSSTestProcUnit ';'
		('level2' ':=' level2=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		'app_to_level2' ':=' app_to_level2=[export::GSSExportExport|VersionedQualifiedName] ';'
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level2_to_level1' ':=' level2_to_level1=[export::GSSExportExport|VersionedQualifiedName] ';')?
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_to_level0' ':=' level1_to_level0=[export::GSSExportExport|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcInputLevel1 returns GSSTestProcInputLevel1:
	'GSSTestProcInputLevel1' '{'
		'name' ':=' name=ID ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		'delay_value' ':=' delay_value=INTEGER ';'
		'delay_unit' ':=' delay_unit=GSSTestProcUnit ';'
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		'app_to_level1' ':=' app_to_level1=[export::GSSExportExport|VersionedQualifiedName] ';'
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_to_level0' ':=' level1_to_level0=[export::GSSExportExport|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcInputLevel0 returns GSSTestProcInputLevel0:
	'GSSTestProcInputLevel0' '{'
		'name' ':=' name=ID ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		'delay_value' ':=' delay_value=INTEGER ';'
		'delay_unit' ':=' delay_unit=GSSTestProcUnit ';'
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		'app_to_level0' ':=' app_to_level0=[export::GSSExportExport|VersionedQualifiedName] ';'
	'}' ';'
;

enum GSSTestProcUnit returns GSSTestProcUnit:
	miliseconds = 'miliseconds' | seconds = 'seconds'
;

enum GSSTestProcCheckmode returns GSSTestProcCheckmode:
	all = 'all' | allunsorted = 'allunsorted' | any = 'any'
;

GSSTestProcOutputLevel3 returns GSSTestProcOutputLevel3:
	'GSSTestProcOutputLevel3' '{'
		'name' ':=' name=ID ';'
		'id' ':=' id=INTEGER ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		('optional' ':=' optional=INTEGER ';')?
		('level3' ':=' level3=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		level3_filter=GSSTestProcLevel3Filter
		('level2' ':=' level2=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level3_from_level2' ':=' level3_from_level2=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level2_filter=GSSTestProcLevel2Filter
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level2_from_level1' ':=' level2_from_level1=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level1_filter=GSSTestProcLevel1Filter
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_from_level0' ':=' level1_from_level0=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level0_filter=GSSTestProcLevel0Filter
	'}' ';'
;

GSSTestProcOutputLevel2 returns GSSTestProcOutputLevel2:
	'GSSTestProcOutputLevel2' '{'
		'name' ':=' name=ID ';'
		'id' ':=' id=INTEGER ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		('optional' ':=' optional=INTEGER ';')?
		('level2' ':=' level2=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		level2_filter=GSSTestProcLevel2Filter
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level2_from_level1' ':=' level2_from_level1=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level1_filter=GSSTestProcLevel1Filter
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_from_level0' ':=' level1_from_level0=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level0_filter=GSSTestProcLevel0Filter
	'}' ';'
;

GSSTestProcOutputLevel1 returns GSSTestProcOutputLevel1:
	'GSSTestProcOutputLevel1' '{'
		'name' ':=' name=ID ';'
		'id' ':=' id=INTEGER ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		('optional' ':=' optional=INTEGER ';')?
		('level1' ':=' level1=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		level1_filter=GSSTestProcLevel1Filter
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		('level1_from_level0' ':=' level1_from_level0=[imports::GSSImportImport|VersionedQualifiedName] ';')?
		level0_filter=GSSTestProcLevel0Filter
	'}' ';'
;

GSSTestProcOutputLevel0 returns GSSTestProcOutputLevel0:
	'GSSTestProcOutputLevel0' '{'
		'name' ':=' name=ID ';'
		'id' ':=' id=INTEGER ';'
		'ifRef' ':=' ifRef=INTEGER ';'
		('optional' ':=' optional=INTEGER ';')?
		('level0' ':=' level0=[tm_tc_format::GSSTmTcFormatTmTCFormat|VersionedQualifiedName] ';')?
		level0_filter=GSSTestProcLevel0Filter
	'}' ';'
;

GSSTestProcLevel3Filter returns GSSTestProcLevel3Filter:
	'GSSTestProcLevel3Filter' '{'
		'apply_def_filter' ':=' apply_def_filter=GSSTestProcYesNo ';'
		('extra_filter' ':=' extra_filter=[filters::GSSFilterFilter|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcLevel2Filter returns GSSTestProcLevel2Filter:
	'GSSTestProcLevel2Filter' '{'
		'apply_def_filter' ':=' apply_def_filter=GSSTestProcYesNo ';'
		('extra_filter' ':=' extra_filter=[filters::GSSFilterFilter|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcLevel1Filter returns GSSTestProcLevel1Filter:
	'GSSTestProcLevel1Filter' '{'
		'apply_def_filter' ':=' apply_def_filter=GSSTestProcYesNo ';'
		('extra_filter' ':=' extra_filter=[filters::GSSFilterFilter|VersionedQualifiedName] ';')?
	'}' ';'
;

GSSTestProcLevel0Filter returns GSSTestProcLevel0Filter:
	'GSSTestProcLevel0Filter' '{'
		'apply_def_filter' ':=' apply_def_filter=GSSTestProcYesNo ';'
		('extra_filter' ':=' extra_filter=[filters::GSSFilterFilter|VersionedQualifiedName] ';')?
	'}' ';'
;

enum GSSTestProcYesNo returns GSSTestProcYesNo:
	yes = 'yes' | no = 'no'
;

GSSTestProcEnable returns GSSTestProcEnable:
	'GSSTestProcEnable' '{'
		'id' ':=' id=INTEGER ';'
	'}' ';'
;

GSSTestProcDisable returns GSSTestProcDisable:
	'GSSTestProcDisable' '{'
		'id' ':=' id=INTEGER ';'
	'}' ';'
;

GSSTestProcEnablePrint returns GSSTestProcEnablePrint:
	'GSSTestProcEnablePrint' '{'
		'id' ':=' id=INTEGER ';'
	'}' ';'
;

GSSTestProcDisablePrint returns GSSTestProcDisablePrint:
	'GSSTestProcDisablePrint' '{'
		'id' ':=' id=INTEGER ';'
	'}' ';'
;

GSSTestProcNextStep returns GSSTestProcNextStep:
	'GSSTestProcNextStep' '{'
		'id' ':=' id=INTEGER ';'
		'isConcurrent' ':=' isConcurrent=GSSTestProcYesNo ';'
	'}' ';'
;

GSSTestProcConcurrentStep returns GSSTestProcConcurrentStep:
	'GSSTestProcConcurrentStep' '{'
		'id' ':=' id=INTEGER ';'
	'}' ';'
;

EString returns ecore::EString:
	STRING | ID;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
REAL returns ecore::EString:
	'-'? (INT '.' ':=' INT) ('e' ('-')? INT)?;