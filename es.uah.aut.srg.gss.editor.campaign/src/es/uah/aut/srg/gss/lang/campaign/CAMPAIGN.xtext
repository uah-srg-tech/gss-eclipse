grammar es.uah.aut.srg.gss.lang.campaign.CAMPAIGN with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/campaign" 
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://srg.aut.uah.es/gss/scenario" as scenario
import "http://srg.aut.uah.es/gss/environment" as environment
import "http://srg.aut.uah.es/gss/test_proc" as test_proc

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSCampaignCampaign
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' ':=' importURI=STRING ';'
;

GSSCampaignCampaign returns GSSCampaignCampaign:
	'GSSCampaignCampaign'
	name=ID
	'{'
		('uri' ':=' uri=QualifiedName ';')
		'version' ':=' version=Version ';'
		Scenario=GSSCampaignScenario
		Tests=GSSCampaignTests
	'}' ';'
;
		
GSSCampaignScenario returns GSSCampaignScenario:
	'GSSCampaignScenario' '{'
		'environment' ':=' environment=[environment::GSSEnvironmentEnvironment|VersionedQualifiedName] ';'
		'scenarioId' ':=' scenario=[scenario::GSSScenarioScenario|STRING] ';'
	'}' ';'
;
		
GSSCampaignTests returns GSSCampaignTests:
	'GSSCampaignTests' '{'
		(TestCase+=GSSCampaignTestCase)+ 
	'}' ';'
;

GSSCampaignTestCase returns GSSCampaignTestCase:
	'GSSCampaignTestCase' '{'
		'name' ':=' name=STRING ';'
		'procedure' ':=' procedure=[test_proc::GSSTestProcTestProc|VersionedQualifiedName] ';'
		('req' req=ID)?
		('reqAction' reqAction=GSSCampaignTestReqAction)?
	'}' ';'
;

enum GSSCampaignTestReqAction returns GSSCampaignTestReqAction:
	_1 = '_1'
;

EString returns ecore::EString:
	STRING | ID;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false'; 
	
REAL returns ecore::EString:
	'-'? (INT '.' ':=' INT) ('e' ('-')? INT)?;

DATE returns ecore::EString:
	INT ('/') INT ('/') INT;

URL returns ecore::EString:
	ID ('+' ID)? '://' (ID ('.')?)+ ('/' ID)* ('/')?;