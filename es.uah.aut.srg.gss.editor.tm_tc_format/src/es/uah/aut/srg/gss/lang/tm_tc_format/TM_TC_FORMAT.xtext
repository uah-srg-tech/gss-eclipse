// automatically generated by Xtext
grammar es.uah.aut.srg.gss.lang.tm_tc_format.TM_TC_FORMAT with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/tm_tc_format" 
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSTmTcFormatTmTcFormat
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' ':=' importURI=STRING ';'
;

GSSTmTcFormatTmTcFormat returns GSSTmTcFormatTmTcFormat:
	'GSSTmTcFormatTmTcFormat'
	name=ID
	 '{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';')
		& ('protocol' ':=' protocol=ID ';')
		& ('type' ':=' type=GSSTmTcFormatTmTcFormatType ';')
		((CSField+=GSSTmTcFormatCSField) |
		 (CSFormulaField+=GSSTmTcFormatCSFormulaField) |
		 (VSField+=GSSTmTcFormatVSField) |
		 (FDICField+=GSSTmTcFormatFDICField) |
		 (VRFieldSize+=GSSTmTcFormatVRFieldSize) |
		 (AField+=GSSTmTcFormatAField) |
		 (AIField+=GSSTmTcFormatAIField))*)
	'}' ';'
;

enum GSSTmTcFormatTmTcFormatType returns GSSTmTcFormatTmTcFormatType:
	TM = 'TM' | TC = 'TC'
;

GSSTmTcFormatField returns GSSTmTcFormatField:
	GSSTmTcFormatCSField | GSSTmTcFormatCSFormulaField |
	GSSTmTcFormatVSField | GSSTmTcFormatVRFieldSize| GSSTmTcFormatFDICField
;

GSSTmTcFormatCSField returns GSSTmTcFormatCSField:
	'GSSTmTcFormatCSField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'type' ':=' type=GSSTmTcFormatFieldType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		size=GSSTmTcFormatSize
		globalOffset=GSSTmTcFormatGlobalOffset
	'}' ';'
;

GSSTmTcFormatCSFormulaField returns GSSTmTcFormatCSFormulaField:
	'GSSTmTcFormatCSFormulaField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'type' ':=' type=GSSTmTcFormatFieldType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		size=GSSTmTcFormatSize
		globalOffset=GSSTmTcFormatGlobalOffset
		formula=GSSTmTcFormatFormula
	'}' ';'
;

GSSTmTcFormatVSField returns GSSTmTcFormatVSField:
	'GSSTmTcFormatVSField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'type' ':=' type=GSSTmTcFormatFieldType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		constSize=GSSTmTcFormatConstSize
		maxSize=GSSTmTcFormatMaxSize
		variableSize=GSSTmTcFormatVariableSize
		globalOffset=GSSTmTcFormatGlobalOffset
	'}' ';'
;

GSSTmTcFormatVRFieldSize returns GSSTmTcFormatVRFieldSize:
	'GSSTmTcFormatVRFieldSize' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
	'}' ';'
;

GSSTmTcFormatFDICField returns GSSTmTcFormatFDICField:
	'GSSTmTcFormatFDICField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'checkType' ':=' checkType=GSSTmTcFormatCheckType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		size=GSSTmTcFormatSize
		floatingOffset=GSSTmTcFormatFloatingOffset
		sortedFieldsToCheck=GSSTmTcFormatSortedFieldsToCheck
	'}' ';'
;

GSSTmTcFormatAField returns GSSTmTcFormatAField:
	'GSSTmTcFormatAField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'type' ':=' type=GSSTmTcFormatFieldType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		size=GSSTmTcFormatSize
		globalOffset=GSSTmTcFormatGlobalOffset
		arrayDimension=GSSTmTcFormatArrayDimension
	'}' ';'
;

GSSTmTcFormatAIField returns GSSTmTcFormatAIField:
	'GSSTmTcFormatAIField' '{'
		'fid' ':=' fid=INTEGER ';'
		'pfid' ':=' pfid=INTEGER ';'
		'name' ':=' name=ID ';'
		('description' ':=' description=ID ';')?
		'type' ':=' type=GSSTmTcFormatFieldType ';'
		'byteOrder' ':=' byteOrder=GSSTmTcFormatFieldByteOrder ';'
		'firstBit' ':=' firstBit=GSSTmTcFormatSFieldFirstBit ';'
		size=GSSTmTcFormatSize
		localOffset=GSSTmTcFormatLocalOffset
		arrayRef=GSSTmTcFormatArrayRef
	'}' ';'
;

enum GSSTmTcFormatFieldType returns GSSTmTcFormatFieldType:
	structured = 'structured' | uint = 'uint' | flag = 'flag' |
	enumerated = 'enumerated' | bit_vector = 'bit_vector' |
	byte_vector = 'byte_vector' | float = 'float' | deduced = 'deduced'
;

enum GSSTmTcFormatFieldByteOrder returns GSSTmTcFormatFieldByteOrder:
	big_endian = 'big_endian' | little_endian = 'little_endian' | na = 'na'
;

enum GSSTmTcFormatSFieldFirstBit returns GSSTmTcFormatSFieldFirstBit:
	MSB = 'MSB' | LSB = 'LSB'
;

GSSTmTcFormatSize returns GSSTmTcFormatSize:
	'GSSTmTcFormatSize'
	'{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatGlobalOffset returns GSSTmTcFormatGlobalOffset:
	'GSSTmTcFormatGlobalOffset' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatFormula returns GSSTmTcFormatFormula:
	'GSSTmTcFormatFormula' '{'
		'slope' ':=' slope=STRING ';'
		'intercept' ':=' intercept=STRING ';'
	'}' ';'
;

GSSTmTcFormatConstSize returns GSSTmTcFormatConstSize:
	'GSSTmTcFormatConstSize' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatMaxSize returns GSSTmTcFormatMaxSize:
	'GSSTmTcFormatMaxSize' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatVariableSize returns GSSTmTcFormatVariableSize:
	'GSSTmTcFormatVariableSize' '{'
		'fidRef' ':=' fidRef=INTEGER ';'
		'unit' ':=' unit=GSSTmTcFormatUnit ';'
		('power' ':=' power=GSSTmTcFormatPower ';')?
	'}' ';'
;

enum GSSTmTcFormatUnit returns GSSTmTcFormatUnit:
	bytes = 'bytes' | bits = 'bits' |
	halfword = 'halfword' | string10 = 'string10' |
	string17 = 'string17' | string69 = 'string69'
;

enum GSSTmTcFormatPower returns GSSTmTcFormatPower:
	_2 = '2bits' | _2_with_0 = '2bits_with_0'
;

enum GSSTmTcFormatCheckType returns GSSTmTcFormatCheckType:
	crc16 = 'crc16' | checksum16 = 'checksum16'
;

GSSTmTcFormatFloatingOffset returns GSSTmTcFormatFloatingOffset:
	'GSSTmTcFormatFloatingOffset' '{'
		'fidRef' ':=' fidRef=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatSortedFieldsToCheck returns GSSTmTcFormatSortedFieldsToCheck:
	{GSSTmTcFormatSortedFieldsToCheck}
	'GSSTmTcFormatSortedFieldsToCheck' '{'
		(fieldToCheck+=GSSTmTcFormatFieldToCheck)+
	'}' ';'
;

GSSTmTcFormatFieldToCheck returns GSSTmTcFormatFieldToCheck:
	'GSSTmTcFormatFieldToCheck' '{'
		'fidRef' ':=' fidRef=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatArrayDimension returns GSSTmTcFormatArrayDimension:
	'GSSTmTcFormatArrayDimension' '{'
		'fidRef' ':=' fidRef=INTEGER ';'
		'maxItems' ':=' maxItems=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatLocalOffset returns GSSTmTcFormatLocalOffset:
	'GSSTmTcFormatLocalOffset' '{'
		'bytes' ':=' bytes=INTEGER ';'
		'bits' ':=' bits=INTEGER ';'
	'}' ';'
;

GSSTmTcFormatArrayRef returns GSSTmTcFormatArrayRef:
	'GSSTmTcFormatArrayRef' '{'
		'fidRef' ':=' fidRef=INTEGER ';'
	'}' ';'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
REAL returns ecore::EString:
	'-'? (INT '.' INT) ('e' ('-')? INT)?;
