// automatically generated by Xtext
grammar es.uah.aut.srg.gss.lang.imports.IMPORTS with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/gss/imports" 
import "http://srg.aut.uah.es/gss/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://srg.aut.uah.es/gss/tm_tc_format" as tm_tc_format

GSSModelFile returns common::GSSModelFile:
	(imports+=GSSModelFileImport)*
	element=GSSImportImport
;

GSSModelFileImport returns common::GSSModelFileImport: 
	'import' ':=' importURI=STRING ';'
;

GSSImportImport returns GSSImportImport:
	'GSSImportImport'
	name=EString
	'{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';'))
		'from' ':=' from=[tm_tc_format::GSSTmTcFormatTmTcFormat|VersionedQualifiedName] ';'
		'to' ':=' to=[tm_tc_format::GSSTmTcFormatTmTcFormat|VersionedQualifiedName] ';'
		(dataSource+=GSSImportDataSource)+ 
		(virtualSize=GSSImportVirtualSize)?
	'}' ';'
;

GSSImportDataSource returns GSSImportDataSource:
	'GSSImportDataSource' '{'
		'FieldRef' ':=' FieldRef=[tm_tc_format::GSSTmTcFormatField|VersionedQualifiedName] ';'
		'leftTrim' ':=' leftTrim=INTEGER ';'
		'rightTrim' ':=' rightTrim=INTEGER ';'
	'}' ';'
;

GSSImportVirtualSize returns GSSImportVirtualSize:
	'GSSImportVirtualSize' '{'
		'FieldRef' ':=' FieldRef=ID ';'
		'to' ':=' to=ID ';'
		('addSize' ':=' addSize=INTEGER ';')?
		('unit' ':=' unit=GSSImportUnit ';')?
	'}' ';'
;

enum GSSImportUnit returns GSSImportUnit:
	bits = 'bits' | bytes = 'bytes'
;

EString returns ecore::EString:
	STRING | ID;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
REAL returns ecore::EString:
	'-'? (INT '.' ':=' INT) ('e' ('-')? INT)?;